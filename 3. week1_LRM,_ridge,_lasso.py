# -*- coding: utf-8 -*-
"""Weeek1 LRM, Ridge, Lasso.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1auqV5qQgZ-BGMa_mysLGj8Jmuz5K54WN
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/advertising.csv')

if isinstance(df, pd.DataFrame):
    print("df is a Pandas DataFrame")
else:
    print("df is not a Pandas DataFrame")

df.head()

df.isnull().sum()

"""# ***Linear Rgression***"""

# defining Independent and dependent Variables
X=df.iloc[: , :3]
y=df.iloc[:, -1]

X

# train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3, random_state= 42)

# # Standerdization
# from sklearn.preprocessing import StandardScaler
# scaler=StandardScaler()
# X_train = scaler.fit_transform(X_train)

# x_test = scaler.transform(X_test)


# sandardization is not needed in this case

# Apply Linear Regression
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# cross validation
from sklearn.model_selection import cross_val_score
MSE = cross_val_score(regressor, X_train, y_train, scoring='neg_mean_squared_error', cv=10)
MSE

np.mean(MSE)

# predicting
LR_pred = regressor.predict(X_test)

# plot
sns.displot(y_test - LR_pred, kind='kde')

from sklearn.metrics import r2_score
score = r2_score(y_test, LR_pred)
print("The r2 score of LRM is :", score)

from sklearn.metrics import mean_squared_error
print("The Mean Squared Error of LRM is:", mean_squared_error(y_test, LR_pred))

print("The RMSE of LRM is:", np.sqrt(mean_squared_error(y_test, LR_pred)))



"""# ***Ridge Regression***"""

# Import Ridge
from sklearn.linear_model import Ridge
# Initialize Ridge
Ridge = Ridge()
# Import GridSearchCV
from sklearn.model_selection import GridSearchCV

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# define range of alpha for hyperparameter tuning
parameter = {'alpha': [1,2,5,7,10,20,30,40,50,60,70,80,90]}

Ridgecv = GridSearchCV(Ridge, parameter, cv=5)
Ridgecv.fit(X_train, y_train)

# predicting
Ridge_pred = Ridgecv.predict(X_test)
Ridge_pred

print(Ridgecv.best_params_)

print(Ridgecv.best_score_)

sns.displot(y_test - Ridge_pred, kind='kde')

score= r2_score(y_test, Ridge_pred)
print("The r2 score of Ridge is :", score)

from sklearn.metrics import mean_squared_error
print("The Mean Squared Error of Ridge is:", mean_squared_error(y_test, Ridge_pred))

print("The RMSE of Ridge is:", np.sqrt(mean_squared_error(y_test, Ridge_pred)))

"""# ***Lasso Regression***"""

from sklearn.linear_model import Lasso
# Initialize Lasso
Lasso = Lasso()

from sklearn.model_selection import GridSearchCV

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Parameters
parameter = {'alpha': [1,2,5,7,10,20,30,40,50,60,70,80,90]}

Lassocv = GridSearchCV(Lasso, parameter, cv=5)
Lassocv.fit(X_train, y_train)

print(Lassocv.best_params_)

print(Lassocv.best_score_)

# Predict
Lasso_pred = Lassocv.predict(X_test)

# plot
sns.displot(y_test - Lasso_pred, kind = 'kde')

from sklearn.metrics import r2_score
score = r2_score(y_test, Lasso_pred)
print("The r2 score of Lasso is:", score)

from sklearn.metrics import mean_squared_error
print("The MSE of Lasso is:", mean_squared_error(y_test, Lasso_pred))

print("The RMSE of Lasso is:", np.mean(mean_squared_error(y_test, Lasso_pred)))

"""The r2 score of LRM is : 0.9091484341849799

The Mean Squared Error of LRM is: 2.541624036229147

The RMSE of LRM is: 1.5942471691143587




The r2 score of Ridge is : 0.908348101981371

The Mean Squared Error of Ridge is: 2.5640137831466907

The RMSE of Ridge is: 1.6012538159663166




The r2 score of Lasso is: 0.815294032291096

The MSE of Lasso is: 5.167254113371623

The RMSE of Lasso is: 5.167254113371623


**From the above scores 'LRM' Best Suits for this Data**
"""

